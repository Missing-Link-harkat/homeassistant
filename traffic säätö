from scapy.all import sniff, IP, TCP, UDP
import signal
import sys

MAX_LOG_LINES = 250
LOG_FILE_PATH = "/root/traffic_log.txt"

running = True

def signal_handler(sig, frame):
    global running
    print("\nStopping packet sniffing...")
    running = False

def filter_traffic(packet):
    """Filter outgoing traffic from Home Assistant running in a Docker container."""
    try:
        # Check if the packet has an IP layer
        if IP in packet:
            # Get the source IP and port
            src_ip = packet[IP].src
            dst_ip = packet[IP].dst
            if TCP in packet or UDP in packet:
                layer = TCP if TCP in packet else UDP
                src_port = packet[layer].sport
                dst_port = packet[layer].dport

                # Customize this condition to match your Home Assistant container's IP
                home_assistant_ip = "192.168.1.1"

                if src_ip == home_assistant_ip:
                    log_entry = f"Outgoing traffic: {src_ip}:{src_port} -> {dst_ip}:{dst_port}\n"
                    print(log_entry)

                    # Append the log entry to a file
                    with open(LOG_FILE_PATH, "a") as log_file:
                        log_file.write(log_entry)

                    # Check the file size and truncate if necessary
                    maintain_log_size()

    except Exception as e:
        print(f"Error processing packet: {e}")

def maintain_log_size():
    """Keep the log file size under control by truncating it after a certain number of lines."""
    try:
        with open(LOG_FILE_PATH, "r") as log_file:
            lines = log_file.readlines()

        if len(lines) > MAX_LOG_LINES:
            # Keep only the last MAX_LOG_LINES lines
            with open(LOG_FILE_PATH, "w") as log_file:
                log_file.writelines(lines[-MAX_LOG_LINES:])

    except FileNotFoundError:
        # If the file doesn't exist yet, there's nothing to truncate
        pass

def main():
    global running
    print("Monitoring outgoing traffic from Home Assistant Docker container...")

    # Handle graceful shutdown
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # Replace 'docker0' with your Docker network interface (default is 'docker0')
    interface = "docker0"

    # Start sniffing packets
    while running:
        sniff(iface=interface, prn=filter_traffic, store=False, stop_filter=lambda x: not running)

if __name__ == "__main__":
    main()

