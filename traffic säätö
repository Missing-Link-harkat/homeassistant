import os

LOG_FILE_PATH = "/root/ha_log_file.txt"  # Path to the new log file
HA_LOG_FILE_PATH = "/config/home-assistant.log"  # Path to the Home Assistant log file

# Track the last read position of the log file
def get_last_position():
    """Get the last read position of the log file."""
    try:
        if os.path.exists(LOG_FILE_PATH + ".pos"):
            with open(LOG_FILE_PATH + ".pos", "r") as pos_file:
                return int(pos_file.read().strip())
    except Exception as e:
        print(f"Error reading position file: {e}")
    return 0

def save_last_position(position):
    """Save the last read position of the log file."""
    try:
        with open(LOG_FILE_PATH + ".pos", "w") as pos_file:
            pos_file.write(str(position))
    except Exception as e:
        print(f"Error saving position file: {e}")

def log_new_entries():
    """Log new entries from Home Assistant log file to the new log file."""
    try:
        last_position = get_last_position()

        if os.path.exists(HA_LOG_FILE_PATH):
            with open(HA_LOG_FILE_PATH, "r") as ha_log_file:
                ha_log_file.seek(last_position)  # Move to the last read position

                with open(LOG_FILE_PATH, "a") as log_file:
                    for line in ha_log_file:
                        log_file.write(line)
                        print(line.strip())

                # Save the new position
                save_last_position(ha_log_file.tell())
        else:
            print(f"Home Assistant log file not found at {HA_LOG_FILE_PATH}")

    except Exception as e:
        error_message = f"Error reading Home Assistant log file: {e}\n"
        with open(LOG_FILE_PATH, "a") as log_file:
            log_file.write(error_message)
        print(error_message)

def main():
    print("Tracking Home Assistant log changes...")
    while True:
        log_new_entries()

if __name__ == "__main__":
    main()
